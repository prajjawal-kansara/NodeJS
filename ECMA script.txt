Type Conversion
The ECMAScript language implicitly performs automatic type conversion as needed. To clarify the semantics of certain constructs it is useful to define a set of conversion abstract operations. The conversion abstract operations are polymorphic; they can accept a value of any ECMAScript language type. But no other specification types are used with these operations.

The BigInt type has no implicit conversions in the ECMAScript language; programmers must call BigInt explicitly to convert values from other types.


ToPrimitive ( input [ , preferredType ] )
The abstract operation ToPrimitive takes argument input (an ECMAScript language value) and optional argument preferredType (string or number) and returns either a normal completion containing an ECMAScript language value or a throw completion. It converts its input argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint preferredType to favour that type. It performs the following steps when called:

    1. If input is an Object, then
        a. Let exoticToPrim be ? GetMethod(input, %Symbol.toPrimitive%).
        b. If exoticToPrim is not undefined, then
            i. If preferredType is not present, then
                1. Let hint be "default".
            ii. Else if preferredType is string, then
                1. Let hint be "string".
            iii. Else,
                1. Assert: preferredType is number.
                2. Let hint be "number".
            iv. Let result be ? Call(exoticToPrim, input, ¬´ hint ¬ª).
            v. If result is not an Object, return result.
            vi. Throw a TypeError exception.
        c. If preferredType is not present, let preferredType be number.
        d. Return ? OrdinaryToPrimitive(input, preferredType).
    2. Return input.

 OrdinaryToPrimitive ( O, hint )
The abstract operation OrdinaryToPrimitive takes arguments O (an Object) and hint (string or number) and returns either a normal completion containing an ECMAScript language value or a throw completion. It performs the following steps when called:

    1. If hint is string, then
        a. Let methodNames be ¬´ "toString", "valueOf" ¬ª.
    2. Else,
        a. Let methodNames be ¬´ "valueOf", "toString" ¬ª.
    3. For each element name of methodNames, do
        a. Let method be ? Get(O, name).
        b. If IsCallable(method) is true, then
            i. Let result be ? Call(method, O).
            ii. If result is not an Object, return result.
    4. Throw a TypeError exception.

ToBoolean ( argument )
The abstract operation ToBoolean takes argument argument (an ECMAScript language value) and returns a Boolean. It converts argument to a value of type Boolean. It performs the following steps when called:

    1. If argument is a Boolean, return argument.
    2. If argument is one of undefined, null, +0ùîΩ, -0ùîΩ, NaN, 0‚Ñ§, or the empty String, return false.
    3. NOTE: This step is replaced in section B.3.6.1.
    4. Return true.


ToNumber ( argument )
The abstract operation ToNumber takes argument argument (an ECMAScript language value) and returns either a normal completion containing a Number or a throw completion. It converts argument to a value of type Number. It performs the following steps when called:

    1. If argument is a Number, return argument.
    2. If argument is either a Symbol or a BigInt, throw a TypeError exception.
    3. If argument is undefined, return NaN.
    4. If argument is either null or false, return +0ùîΩ.
    5. If argument is true, return 1ùîΩ.
    6. If argument is a String, return StringToNumber(argument).
    7. Assert: argument is an Object.
    8. Let primValue be ? ToPrimitive(argument, number).
    9. Assert: primValue is not an Object.
    10. Return ? ToNumber(primValue).

ToString ( argument )
The abstract operation ToString takes argument argument (an ECMAScript language value) and returns either a normal completion containing a String or a throw completion. It converts argument to a value of type String. It performs the following steps when called:

    1. If argument is a String, return argument.
    2. If argument is a Symbol, throw a TypeError exception.
    3. If argument is undefined, return "undefined".
    4. If argument is null, return "null".
    5. If argument is true, return "true".
    6. If argument is false, return "false".
    7. If argument is a Number, return Number::toString(argument, 10).
    8. If argument is a BigInt, return BigInt::toString(argument, 10).
    9. Assert: argument is an Object.
    10. Let primValue be ? ToPrimitive(argument, string).
    11. Assert: primValue is not an Object.
    12. Return ? ToString(primValue).

StringToNumber ( str )
The abstract operation StringToNumber takes argument str (a String) and returns a Number. It performs the following steps when called:

    1. Let literal be ParseText(str, StringNumericLiteral).
    2. If literal is a List of errors, return NaN.
    3. Return the StringNumericValue of literal.

ToObject ( argument ):
The abstract operation ToObject takes argument argument (an ECMAScript language value) and returns either a normal completion containing an Object or a throw completion. It converts argument to a value of type Object according to Table 13:
‚Üí ToObject Conversions

Argument Type 	                Result

Undefined 	                    Throw a TypeError exception.
Null 	                        Throw a TypeError exception.
Boolean                     	Return a new Boolean object whose [[BooleanData]] internal slot is set to argument. See 20.3 for a description of Boolean objects.
Number 	                        Return a new Number object whose [[NumberData]] internal slot is set to argument. See 21.1 for a description of Number objects.
String 	                        Return a new String object whose [[StringData]] internal slot is set to argument. See 22.1 for a description of String objects.
Symbol 	                        Return a new Symbol object whose [[SymbolData]] internal slot is set to argument. See 20.4 for a description of Symbol objects.
BigInt 	                        Return a new BigInt object whose [[BigIntData]] internal slot is set to argument. See 21.2 for a description of BigInt objects.
Object 	                        Return argument. 